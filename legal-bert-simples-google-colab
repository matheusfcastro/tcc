!pip install transformers torch pdfplumber pandas reportlab

from google.colab import files

uploaded = files.upload()  # Isso abrir√° um prompt para selecionar arquivos

import pdfplumber

def extract_text_from_pdf(file_path):
    with pdfplumber.open(file_path) as pdf:
        text = "\n".join([page.extract_text() for page in pdf.pages if page.extract_text()])
    return text

# Nome dos arquivos enviados
contract_compliant_pdf = "contract_in_compliance.pdf"
contract_non_compliant_pdf = "contract_not_in_compliance.pdf"

# Extrair texto dos PDFs
contract_compliant_text = extract_text_from_pdf(contract_compliant_pdf)
contract_non_compliant_text = extract_text_from_pdf(contract_non_compliant_pdf)

from transformers import AutoModelForSequenceClassification, AutoTokenizer
import torch

model_name = "nlpaueb/legal-bert-base-uncased"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForSequenceClassification.from_pretrained(model_name, num_labels=2)  # Bin√°rio: Compliance / Non-Compliance

def evaluate_compliance(text):
    inputs = tokenizer(text, return_tensors="pt", padding=True, truncation=True, max_length=512)
    with torch.no_grad():
        outputs = model(**inputs)
    scores = torch.softmax(outputs.logits, dim=1)
    compliance_score = scores[0][1].item()  # Probabilidade de estar em conformidade
    return compliance_score

criteria = [
    ("Defini√ß√£o clara de 'dados pessoais' conforme GDPR", ["dados pessoais", "GDPR Art. 4(1)"]),
    ("Defini√ß√£o de termos como 'controlador', 'operador' e 'titular'", ["defini√ß√µes", "GDPR Art. 4"]),
    ("Base legal clara e justificada para o processamento de dados", ["base legal", "GDPR Art. 6"]),
    ("Princ√≠pios de minimiza√ß√£o e limita√ß√£o de uso de dados garantidos", ["minimiza√ß√£o de dados", "GDPR Art. 5(1)(c)"]),
    ("Medidas de seguran√ßa t√©cnica e organizacional previstas", ["seguran√ßa", "GDPR Art. 32"]),
    ("Transfer√™ncia internacional de dados alinhada √†s regras da GDPR", ["transfer√™ncia de dados", "GDPR Arts. 44-49"]),
    ("Per√≠odos de reten√ß√£o e obriga√ß√µes de exclus√£o de dados definidos", ["reten√ß√£o de dados", "GDPR Art. 5(1)(e)"]),
    ("Obriga√ß√µes de notifica√ß√£o de viola√ß√µes de dados estabelecidas", ["viola√ß√£o de dados", "GDPR Arts. 33-34"]),
    ("Direitos dos titulares de dados garantidos e operacionalizados", ["acesso a dados", "GDPR Arts. 12-22"]),
    ("Auditorias e inspe√ß√µes para verifica√ß√£o de conformidade permitidas", ["auditoria", "GDPR Art. 28(3)(h)"]),
    ("Cl√°usulas de responsabilidade e indeniza√ß√µes por n√£o conformidade", ["responsabilidade", "GDPR Art. 82"]),
    ("Cl√°usulas de confidencialidade para funcion√°rios e terceiros", ["confidencialidade", "GDPR Art. 28(3)"]),
    ("Regras para subprocessadores e terceiros claramente definidas", ["subprocessadores", "GDPR Art. 28(2)"]),
    ("Registro de atividades de processamento exigido quando aplic√°vel", ["registro de atividades", "GDPR Art. 30"]),
    ("Avalia√ß√£o de Impacto sobre a Prote√ß√£o de Dados (DPIA) exigida se necess√°rio", ["DPIA", "GDPR Art. 35"]),
    ("San√ß√µes e consequ√™ncias para descumprimento da GDPR estabelecidas", ["san√ß√µes", "GDPR Art. 83"]),
    ("Defini√ß√£o clara da legisla√ß√£o aplic√°vel e jurisdi√ß√£o", ["jurisdi√ß√£o", "GDPR e leis nacionais"]),
    ("Uso de t√©cnicas de anonimiza√ß√£o ou pseudonimiza√ß√£o incentivado", ["anonimiza√ß√£o", "GDPR Art. 25"]),
    ("Obriga√ß√µes de coopera√ß√£o com autoridades de prote√ß√£o de dados previstas", ["coopera√ß√£o regulat√≥ria", "GDPR Art. 31"])
]

def check_compliance(text, criteria):
    results = []
    for crit, keywords in criteria:
        compliance = any(keyword.lower() in text.lower() for keyword in keywords)
        results.append("‚úÖ" if compliance else "üö®")
    return results

import pandas as pd

compliant_results = check_compliance(contract_compliant_text, criteria)
non_compliant_results = check_compliance(contract_non_compliant_text, criteria)

# Criar DataFrame com os resultados
df_results = pd.DataFrame({
    "Crit√©rio": [c[0] for c in criteria],
    "Contrato 1": compliant_results,
    "Contrato 2": non_compliant_results
})

# Exibir relat√≥rio
df_results
